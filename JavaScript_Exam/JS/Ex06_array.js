// 배열(Array)
// 자바 배열 => int[] arr = {1,2,3,4};
// 자바 ArrayList => Arraylist list = new ArrayList();   ==>  ArrayList에는 어떤 데이터타입이던 담을 수 있음.

// 자바스크립트의 배열
// - 선언방식 : []
// - 인덱스를 이용하여 데이터 접근
// - 배열의 크기는 length변수로 접근
// - 다양한 자료형의 데이터를 한 곳에 관리하는 자료구조.
// - ArrayList 특성을 가진 배열
// - 가변의 길이
let arr = [1,2,3,4,'5',true];

//빈 배열 생성, 자바와 달리 길이 초기화 안해도 값대입 등 가능.
let arr2 = [];

// 배열 내 데이터 초기화방법1 : 인덱스활용
arr2[0] = 1;
arr2[1] = 2;
arr2[2] = 3;

// 배열 내 데이터 초기화방법2 : push()
// 인덱스 입력안해도 제일 뒤에 순차적으로 값이 쌓임.
// 실제 값 넣을때 많이 활용. 인덱스 활용은 오히려 값 업데이트 할때 많이 사용.
arr2.push(4);
arr2.push(5);
arr2.push(6);

// 배열 내 데이터 접근
for(let i = 0; i< arr2.length; i++){
    console.log(arr2[i]);
}

console.log('데이터 삭제 후');

// 배열 내 데이터 삭제하는 법1 : pop()
// 가장 뒤의 값 순차적으로 삭제
arr2.pop();
arr2.pop();

// 배열 내 데이터 삭제하는 법2 : splice(삭제할 데이터 위치, 삭제할 갯수)
// 인덱스를 활용해 특정 위치의 특정 갯수만큼의 데이터 삭제
arr2.splice(1,1);
arr2.splice(1,2);



for(let i = 0; i< arr2.length; i++){
    console.log(arr2[i]);
}


/*
    배열 다루기 정리
- 데이터 추가 : push()
- 데이터 접근 : 배열명[인덱스]
- 데이터 삭제 : splice(삭제할 데이터 위치, 삭제할 갯수), pop()
- 데이터 수정 : 배열명[인덱스] = 수정할 데이터
*/