/*
 함수(function) 
    - 함수 선언시 function키워드 사용
    - 함수 선언방법 : 함수 선언문, 함수표현식, 화살표함순

    +) 브라우저가 자바스크립트를 실행하기 전에 가장 먼저 하는 일은 
    선언문을 먼저 실행하기!!! (함수, 변수 등)
    ===> 때문에 위에서 아래로 코드를 읽을 때 함수가 선언되기 전인 윗부분에서도 함수가 호출된다!!! ---> 호이스팅
*/

// 1. 함수 선언문 구조
function show(){
    alert('함수호출!');
}

// 매개변수 정의할 때 let키워드 사용하지 않는다!!
function show2(msg){
    alert(msg);
}



// 2. 함수표현식 구조
//  - 자바스크립트에서 함수는 일급객체로 취급 (값으로 쓸 수 있음을 의미)
//  - 함수표현식으로 선언한 이후에 호출이 가능하다!!
let showFunc = function show3(){
    alert(함수호출한다아ㅏㅏ);
}
// 함수를 선언한다기 보다는 값으로 지정. 호이스팅에 적용이 되지 않음!!!! 고로 식이 나온 이후부터만 사용 가능!!



// 3. 화살표함수(Arrow Function)
//  - function키워드 사용 x
//  - let 변수명 = (매개변수, ...) => { 실행코드 }   이러한 구조로 선언, 최근 트렌드 중 하나
//  - 함수 형태를 간략화시키려는 노력!!  실행코드 한 문장일 경우 {}도 생략
let arrowFunc = (msg,msg2) => {
    //alert('화살표 함수 호출!!')
    console.log(msg);
    console.log(msg2);
}

// (), {} 생략가능
// {}는 실행코드가 한 줄일 경우만
// ()는 매개변수가 한 개일 경우만
let arrowFunc2 = msg => console.log(msg);

arrowFunc('화살표 함수 호출!!!', '호출1+1');
arrowFunc2('화살표 함수2 호출!!!');


// * 가변 매개변수 : 함수에 넘길 데이터의 개수가 명확하지 않을 때  ==> ...args
//  - 입력받은 값을 배열로 저장!!
function nameList(...args){
    for(let i = 0; i < args.length; i++){
        console.log(args[i]);
    }
}
nameList('가', '나', '다', '라', '마')